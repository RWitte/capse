import caps.cells.ca.iterateCA;
import caps.particles.pse.iteratePSE;
import caps.visual.plot.visualize;
import caps.cells.ca.computationalRDF; % move RDF into caps.results.*


automaton = struct( ...
    'grid', CAGrid, ...
    'neighbourhoodSize', 6, ...
    'dt', dt_CA, ... % time in hours
    'infectedCells', {inf_list}, ... % Quick lookup shorhand for infected list
    'cellAreaList', {cellAreaList}, ...
    'cellArea', cellArea, ...
    'infectionProbabilities', infectionProbabilities, ...
    'neighbourInfectionProbabilities', neighbourInfectionProbabilities, ...      
    'intensityRatesNormalised', {intensityRatesNormalised}, ...    
    'cellDeathFractions', cellDeathFractions, ...
    'probabilityOfSecondaryLysis', ProbabilityOfSecondaryLysis, ...
    'latentPeriod', latentPeriod, ... % During latent period no lysis is happening
    'numVirionLysed', virionLysed, ... % Number of virions to lysed into extracellular space
    'cellStates', states, ...
    'dimension', CAGridDimensions, ...
    'numCellsX', size(CAGrid, 1), ...
    'numCellsY', size(CAGrid, 2) ...
);

infection = struct( ...
    'initialLevel', initialC2cInfection, ...
    'initialTime', 0, ...
    'initialClock', timeToLyse, ...
    'intensityRates', {intensityRates}, ...
    'virusSpread', virusSpread, ...
    'cellularThreshold', cellularInfectionThreshold ...
);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  CA Time Steps' loop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RDF is a the radial distribution function. It is used as rotation
% invariant readout of intensity change in the plaque (a circular area of secondary infected cells)
RDFs = zeros(timeSteps_CA, floor(sqrt(size(pixelList,1))/2)-1);  %floor(sqrt(size(pixelList,1))/2)-1 substitutes hardcoded 167, that is based on size of grid (cell size 60, 111 - cell size 40)


for timeStep = initCATimeStep:timeSteps_CA
    startCAStep = tic;
    fprintf('*****************  timestep %d  ************************\n', timeStep);
   
    %% CA time step
    startIterateCA = tic;
    
    [automaton, partMat] = iterateCA(automaton, virusFlags, partMat, ... 
        timeStep, infection);
    
    fprintf('iterateCA took %5.4f (sec)\n', toc(startIterateCA));
     if (caps.utils.runningGUI)
        if getappdata(0,'isAnalysisRunning') == 0
            error ('Simulation cancelled by user');
        end
        handles = getappdata(0,'handles');
        caps.utils.writeinlog(handles.log_output,['***** Time Step # ', num2str(timeStep), '***********']);
    end    
    %% PSE time step
    startPSE = tic;
    [partMat, automaton.grid] = iteratePSE( ...
        automaton, virusFlags, partMat, verletList, ...
        partAreaList, dt_PSE, ...
        pseThreshold, lowestInfectionThreshold, ...
        lBounds, uBounds, h, cutOff, epsilon, D, V, ...
        advectionspeed, cellMid, numPerDim, cellSize, pseDebugDir);
    
    fprintf('Running PSE took %5.4f (sec)\n', toc(startPSE));
    %fprintf('Minimum virus in cells %d Maximum virus in cells %d \n', min(CAGrid(:,virusAmtDim)), max(CAGrid(:,virusAmtDim)));
    
    %% Visualize itermidiate results of the step    
    startVisualize = tic;
    
    umPerPx = pixelList(2, 2) - pixelList(1,2);
    if strcmp(OutputMedia, 'Images')
        %visualize the CA with or without the PSE particles
        hg = visualize( ...
            automaton.grid, ...
            partMat, ...
            automaton.infectedCells, ...
            cellSize, ...
            automaton.dimension.state, ...
            automaton.dimension.infectionList, ...
            automaton.dimension.infectionTime, ...
            virusFlags.plotImagesWithParts, ...
            backgroundIntensity);
        saveImages(imgsDir, timeStep, hg, cells_x, cells_y, ImagesOutputWithParts);
                
    elseif strcmp(OutputMedia, 'RDF')
        % save results so far in the RDFs variable
        [RDFs(timeStep, :), intMat] =  computationalRDF( ...
            automaton.grid, ...
            automaton.infectedCells, ...
            pixelList, ...
            automaton.dimension.state, ...
            automaton.dimension.infectionList, ...
            automaton.dimension.infectionTime, ...
            backgroundIntensity);
        trapSteps = [30 113 120];
        for iStep = trapSteps
            if Sensors && timeStep ~= iStep
                continue
            end
            outputFilename = fullfile(Sensorsdir, sprintf('SensorVars%d.mat', timeStep));
            save (outputFilename);
        end        
    end

    fprintf('Visualization took %5.4f (sec)\n', toc(startVisualize));
    
    %% Profiling
    fprintf('Running CA iteration took %5.4f (sec)\n', toc(startCAStep));
    
    %% Wait for key stroke or user input after every iteration
    if pauseOnCAIterations % && timeStep > 100
        waitforbuttonpress;
    end
end
